//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : automat_sm.sm
//

#ifndef GAMEPROVESS_SM_H
#define GAMEPROVESS_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class GameMap;
class GameMap_NotStarted;
class GameMap_MainMenu;
class GameMap_Playing;
class GameMap_GameOver;
class GameMap_Default;
class gameProcessState;
class GameProvess_sm;
class gameProcess;

class gameProcessState :
    public statemap::State
{
public:

    gameProcessState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(GameProvess_sm&) {};
    virtual void Exit(GameProvess_sm&) {};


protected:

    virtual void Default(GameProvess_sm& context);
};

class GameMap
{
public:

    static GameMap_NotStarted NotStarted;
    static GameMap_MainMenu MainMenu;
    static GameMap_Playing Playing;
    static GameMap_GameOver GameOver;
};

class GameMap_Default :
    public gameProcessState
{
public:

    GameMap_Default(const char * const name, const int stateId)
    : gameProcessState(name, stateId)
    {};

};

class GameMap_NotStarted :
    public GameMap_Default
{
public:
    GameMap_NotStarted(const char * const name, const int stateId)
    : GameMap_Default(name, stateId)
    {};

};

class GameMap_MainMenu :
    public GameMap_Default
{
public:
    GameMap_MainMenu(const char * const name, const int stateId)
    : GameMap_Default(name, stateId)
    {};

};

class GameMap_Playing :
    public GameMap_Default
{
public:
    GameMap_Playing(const char * const name, const int stateId)
    : GameMap_Default(name, stateId)
    {};

};

class GameMap_GameOver :
    public GameMap_Default
{
public:
    GameMap_GameOver(const char * const name, const int stateId)
    : GameMap_Default(name, stateId)
    {};

};

class GameProvess_sm :
    public statemap::FSMContext
{
public:

    explicit GameProvess_sm(gameProcess& owner)
    : FSMContext(GameMap::NotStarted),
      _owner(owner)
    {};

    GameProvess_sm(gameProcess& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline gameProcess& getOwner()
    {
        return (_owner);
    };

    inline gameProcessState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<gameProcessState&>(*_state);
    };

private:
    gameProcess& _owner;
};


#endif // GAMEPROVESS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
